input {
  udp {
    port => 5145
    type => mikrot
  }
}

filter {
  if [type] == "mikrot" {
    if [message] =~ "auth timeout" or [message] =~ "dhcp" or [message] =~ "wireless" or [message] =~ "system" { drop {} }
    grok {
      break_on_match => true
      keep_empty_captures => false
      # patterns_dir => ["/usr/share/logstash/patterns"]
      match => { "message" => "%{MIKROTFIREWALLNAT}|%{MIKROTLOGINOUT}|%{MIKROTLOGINFAIL}|%{MIKROTRULECHANGED}" }
      remove_field => [ "host" ]
    }
    cidr {
      add_tag => [ "src_local" ]
      address => [ "%{src_ip}" ]
      network => [ "192.168.0.0/24" ]
    }
  }
}
filter {
  if [type] == "mikrot" and "src_local" not in [tags] and "_grokparsefailure" not in [tags] {
    geoip {
      source => "src_ip"
      default_database_type => "ASN"
      target => "geoip_src_asn"
    }
    geoip {
      source => "dst_ip"
      default_database_type => "ASN"
      target => "geoip_dst_asn"
    }
    geoip {
      source => "src_ip"
      default_database_type => "City"
      target => "geoip_src_city"
    }
    geoip {
      source => "dst_ip"
      default_database_type => "City"
      target => "geoip_dst_city"
    }
    mutate {
      add_tag => [ "mikrotik" ]
      rename => { "[geoip_src_city][ip]" => "[geoip][src][ip]" }
      rename => { "[geoip_dst_city][ip]" => "[geoip][dst][ip]" }
      rename => { "[geoip_src_city][city_name]" => "[geoip][src][city]" }
      rename => { "[geoip_dst_city][city_name]" => "[geoip][dst][city]" }
      rename => { "[geoip_src_city][country_name]" => "[geoip][src][country]" }
      rename => { "[geoip_dst_city][country_name]" => "[geoip][dst][country]" }
      rename => { "[geoip_src_city][latitude]" => "[geoip][location][lat]" }
      rename => { "[geoip_dst_city][latitude]" => "[geoip][dst][location][lat]" }
      rename => { "[geoip_src_city][longitude]" => "[geoip][location][lon]" }
      rename => { "[geoip_dst_city][longitude]" => "[geoip][dst][location][lon]" }
      rename => { "[geoip_src_city][timezone]" => "[geoip][src][timezone]" }
      rename => { "[geoip_dst_city][timezone]" => "[geoip][dst][timezone]" }
      rename => { "[geoip_src_asn][as_org]" => "[geoip][src][asn]" }
      rename => { "[geoip_dst_asn][as_org]" => "[geoip][dst][asn]" }
      rename => { "[geoip_src_asn][asn]" => "[geoip][src][asn]" }
      rename => { "[geoip_dst_asn][asn]" => "[geoip][dst][asn]" }
      remove_field => [ "[geoip_dst_city][continent_code]", "[geoip_dst_city][country_code2]", "[geoip_dst_city][country_code3]", "[geoip_dst_city][location][lat]", "[geoip_dst_city][location][lon]", "[geoip_dst_city][postal_code]", "[geoip_dst_city][region_code]", "[geoip_dst_city][region_name]", "[geoip_dst_asn][ip]", "[geoip_src_city][continent_code]", "[geoip_src_city][country_code2]", "[geoip_src_city][country_code3]", "[geoip_src_city][location][lat]", "[geoip_src_city][location][lon]", "[geoip_src_city][postal_code]", "[geoip_src_city][region_code]", "[geoip_src_city][region_name]", "[geoip_src_asn][ip]", "geoip_dst_asn", "geoip_src_asn", "geoip_dst_city", "location", "geoip_src_city" ]
    }
  }
}

output {
  if [type] == "mikrot" {
    elasticsearch {
      hosts => "192.168.1.118:9200"
      index => "logstash-mikrot-%{+YYYY.MM.dd}"
    }
    # stdout { codec => rubydebug }
  }
}

